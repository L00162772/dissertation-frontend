name: Terraform Setup
on:
  workflow_call:
    inputs:
      aws_region:
        required: true
        type: string
      TF_API_TOKEN:
        required: true
        type: string
      GITHUB_TOKEN:
        required: true
        type: string        
runs:
  using: "composite"
  steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: test
        run: pwd && ls -latr
        shell: bash

      - name: Replace AWS Region
        run:  sed -i 's/###AWS_REGION###/${{ env.AWS_REGION }}/g' variables.tf
        shell: bash

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ input.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -recursive -check
        shell: bash

      - name: Terraform Init
        id: init
        run: terraform init
        shell: bash

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        shell: bash

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true
        shell: bash

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ input.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
        shell: bash
  