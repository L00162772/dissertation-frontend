name: Deploy Production
on: [push]
env:
  AWS_REGION: us-east-1
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Clone the repo
      - name: Clone repository
        uses: actions/checkout@v1
      # Cache node modules
      - name: Cache node modules
        uses: actions/cache@v1   
        with:
          path: ./frontend/node_modules
          key: yarn-deps-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            yarn-deps-${{ hashFiles('yarn.lock') }}
      - name: Install React App dependencies
        run: yarn install 
        working-directory: ./frontend               
      # Test the React app
      # - name: Test static build
      #   run: yarn test 
      #   working-directory: ./frontend    
      # # Build the React app
      - name: Create React Application
        run: yarn build && pwd && ls -altr 
        working-directory: ./frontend
      # Upload the artifact for other stages to use
      - name: Share artifact in github workflow
        uses: actions/upload-artifact@v1
        with:
          name: build
          path: frontend/build
  terraform-setup:
    name: "Perform Terraform Setup"
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -recursive -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
  terraform-apply:
    name: "Perform Terraform Apply"
    runs-on: ubuntu-latest
    needs: terraform-setup
    timeout-minutes: 60
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    environment:
      name: dissertation-frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Apply
        #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve

      #- name: Get Elastic Beanstalk Endpoint
      #  run: |
      #     elasticbeanstalk_app_cname=$(terraform output elasticbeanstalk_app_cname)
      #     echo $elasticbeanstalk_app_cname
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Download the build artifact
      - name: Get build artifact
        uses: actions/download-artifact@v1
        with:
          name: build
      # Setup the AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      # Copy the files from /build to s3 bucket
      - name: Deploy static site to S3 bucket
        run: aws s3 sync . s3://${{ secrets.S3_BUCKET_NAME }} --delete
        working-directory: build
      # Invalidate index file in Cloudfront (this forces edges to fetch the latest index.html)
      - name: invalidate
        uses: chetan/invalidate-cloudfront-action@master
        env:
          DISTRIBUTION: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
          PATHS: '/index.html'
          AWS_REGION: $AWS_REGION
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          
  terraform-destroy:
    name: "Perform Terraform Destroy"
    runs-on: ubuntu-latest
    needs: terraform-apply
    timeout-minutes: 1440
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    environment:
      name: dissertation-frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve          